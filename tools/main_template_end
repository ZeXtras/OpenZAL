
  <target name="zal-common" depends="${JOINED_COMMON_ZIMBRA_JAR_VERSIONS}" />
  <target name="zal-all" depends="${JOINED_ZIMBRA_JAR_VERSIONS},zal-dev-last" />

  <target name="zal-dev-current-source"
        description="Create jar for current Zimbra source"
        depends="init,dependencies">

        <property name="zm-build" value="../zm-build" />
        <exec executable="cat" outputproperty="MajorZimbraVersion">
                <arg value="${zm-build}/RE/MAJOR"/>
        </exec>
        <exec executable="cat" outputproperty="MiddleZimbraVersion">
                <arg value="${zm-build}/RE/MINOR"/>
        </exec>
        <exec executable="sed" outputproperty="MinorZimbraVersion">
                <arg value="s/.*\([0-9]\).*/\1/"/>
                <arg value="${zm-build}/RE/MICRO"/>
        </exec>

        <build-zal MajorZimbraVersion = "${MajorZimbraVersion}"
                 MiddleZimbraVersion = "${MiddleZimbraVersion}"
                 MinorZimbraVersion = "${MinorZimbraVersion}"
                 DistDirName = "${ZimbraVersion}"
                 ZimbraJars = "../zm-zcs-lib/build/dist/"
                 ZimbraJarsExt = "../zm-mailbox/build/stage/zimbra-common-core-jar/opt/zimbra/lib/jars/"
                 DevMode = "true" />
  </target>

  <target name="zal-dev-current-binary"
        description="Create jar for current Zimbra binary installed"
        depends="init,dependencies">

        <exec executable="bash" outputproperty="ZimbraVersion">
                <arg value="-c"/>
                <arg value="unzip -p /opt/zimbra/lib/jars/zimbrastore.jar META-INF/MANIFEST.MF | grep Specification\-Version\: | awk '{print $2}'"/>
        </exec>

        <propertyregex
          property="MajorZimbraVersion"
          input="${ZimbraVersion}"
          regexp="([0-9]+)\.([0-9]+)\.([0-9]+).*"
          select="\1"
          casesensitive="false" />

        <propertyregex
          property="MiddleZimbraVersion"
          input="${ZimbraVersion}"
          regexp="([0-9]+)\.([0-9]+)\.([0-9]+).*"
          select="\2"
          casesensitive="false" />

        <propertyregex
          property="MinorZimbraVersion"
          input="${ZimbraVersion}"
          regexp="([0-9]+)\.([0-9]+)\.([0-9]+).*"
          select="\3"
          casesensitive="false" />

        <build-zal MajorZimbraVersion = "${MajorZimbraVersion}"
                 MiddleZimbraVersion = "${MiddleZimbraVersion}"
                 MinorZimbraVersion = "${MinorZimbraVersion}"
                 DistDirName = "${DistDirName}"
                 ZimbraJars = "/opt/zimbra/common/jetty_home/lib/"
                 ZimbraJarsExt = "/opt/zimbra/lib/jars/"
                 DevMode = "true" />
  </target>

  <target name="clean" description="clean up" >
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="dist/" includes="**/*" />
      <fileset dir="build/" includes="**/*" />
      <fileset dir="tmpsrc/" includes="**/*" />
      <fileset dir="." includes="*.deb" />
      <fileset dir="." includes="*.rpm" />
    </delete>
  </target>

  <target name="doxygen" description="create doxygen documentation" >
    <exec executable="doxygen" />
  </target>

  <target name="fast-compatibility-check" description="check compatibility of zal jars">

    <if>
      <equals arg1="${VERSION_MICRO}" arg2="0" />
      <then>
        <var name="lastZalPath" value="" />
      </then>
      <else>
        <var name="lastZalPath" value="bin/previous-zal-version.jar" />
      </else>
    </if>

    <for list="${MAJOR_ZIMBRA_VERSIONS}" param="currentZimbraVersion">
      <sequential>
        <if>
          <equals arg1="${lastZalPath}" arg2="" />
          <else>
            <exec failonerror="true" executable="tools/japi-compliance-checker.pl">
              <arg value="-binary"/>
              <arg value="-l"/>
              <arg value="OpenZal"/>
              <arg value="${lastZalPath}"/>
              <arg value="dist/@{currentZimbraVersion}/zal.jar"/>
            </exec>
          </else>
        </if>
        <var name="lastZalPath" value="dist/@{currentZimbraVersion}/zal.jar" />
      </sequential>
    </for>

    <exec failonerror="true" executable="tools/japi-compliance-checker.pl">
      <arg value="-binary"/>
      <arg value="-l"/>
      <arg value="OpenZal"/>
      <arg value="dist/${LAST_ZIMBRA_VERSION}/zal.jar"/>
      <arg value="dist/${FIRST_ZIMBRA_VERSION}/zal.jar"/>
    </exec>
  </target>

  <target name="compatibility-check" description="check compatibility of zal jars">

    <if>
      <equals arg1="${VERSION_MICRO}" arg2="0" />
      <then>
        <var name="lastZalPath" value="" />
      </then>
      <else>
        <var name="lastZalPath" value="bin/previous-zal-version.jar" />
      </else>
    </if>

    <for list="${ZIMBRA_VERSIONS}" param="currentZimbraVersion">
      <sequential>
        <if>
          <equals arg1="${lastZalPath}" arg2="" />
          <else>
            <exec failonerror="true" executable="/tools/japi-compliance-checker.pl">
              <arg value="-binary"/>
              <arg value="-l"/>
              <arg value="OpenZal"/>
              <arg value="${lastZalPath}"/>
              <arg value="dist/@{currentZimbraVersion}/zal.jar"/>
            </exec>
          </else>
        </if>
        <var name="lastZalPath" value="dist/@{currentZimbraVersion}/zal.jar" />
      </sequential>
    </for>

    <exec failonerror="true" executable="tools/japi-compliance-checker.pl">
      <arg value="-l"/>
      <arg value="OpenZal"/>
      <arg value="dist/${LAST_ZIMBRA_VERSION}/zal.jar"/>
      <arg value="dist/${FIRST_ZIMBRA_VERSION}/zal.jar"/>
    </exec>
  </target>

  <macrodef name="prepare-build-template">
    <attribute name="srcFile"/>
    <attribute name="destFile"/>

    <sequential>
      <copy file="@{srcFile}"
            tofile="@{destFile}"/>
      <replace file="@{destFile}">
        <replacefilter
          token="@VERSION@"
          value="${VERSION}"/>
        <replacefilter
          token="@VERSION_MAJOR@"
          value="${VERSION_MAJOR}"/>
        <replacefilter
          token="@VERSION_MINOR@"
          value="${VERSION_MINOR}"/>
        <replacefilter
          token="@VERSION_MICRO@"
          value="${VERSION_MICRO}"/>
        <replacefilter
          token="@FIRST_ZIMBRA_VERSION@"
          value="${FIRST_ZIMBRA_VERSION}"/>
        <replacefilter
          token="@LAST_ZIMBRA_VERSION@"
          value="${LAST_ZIMBRA_VERSION}"/>
      </replace>
    </sequential>
  </macrodef>

  <target name="package-deb"
          depends="clean, zal-all">
    <local name="deb-dir-tmp"/>
    <property name="deb-dir-tmp" location="deb"/>

    <delete dir="${deb-dir-tmp}"/>

    <mkdir dir="${deb-dir-tmp}"/>
    <mkdir dir="${deb-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}"/>
    <mkdir dir="${deb-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/usr/share/openzal/${VERSION_MAJOR}.${VERSION_MINOR}"/>
    <mkdir dir="${deb-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/DEBIAN"/>

    <prepare-build-template srcFile="tools/deb_control_template"
                            destFile="${deb-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/DEBIAN/control" />

    <copy todir="${deb-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/usr/share/openzal/${VERSION_MAJOR}.${VERSION_MINOR}">
      <fileset dir="dist">
        <include name="**/zal.jar"/>
      </fileset>
    </copy>

    <exec executable="dpkg-deb"
          dir="${deb-dir-tmp}"
          failonerror="true">
      <arg value="--build"/>
      <arg value="openzal-${VERSION_MAJOR}.${VERSION_MINOR}"/>
    </exec>
    <move file="${deb-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}.deb" todir="." />

    <delete dir="${deb-dir-tmp}"/>
  </target>

  <target name="package-rpm"
          depends="clean, zal-all">
    <local name="rpm-dir-tmp"/>
    <property name="rpm-dir-tmp" location="rpm"/>

    <delete dir="${rpm-dir-tmp}"/>

    <mkdir dir="${rpm-dir-tmp}"/>
    <mkdir dir="${rpm-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}"/>
    <mkdir dir="${rpm-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/buildroot/usr/share/openzal/${VERSION_MAJOR}.${VERSION_MINOR}"/>
    <mkdir dir="${rpm-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/SPEC"/>
    <mkdir dir="${rpm-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/RPMS"/>

    <prepare-build-template srcFile="tools/rpm_spec_template"
                            destFile="${rpm-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/SPEC/openzal-${VERSION_MAJOR}.${VERSION_MINOR}.spec" />

    <copy todir="${rpm-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/buildroot/usr/share/openzal/${VERSION_MAJOR}.${VERSION_MINOR}">
      <fileset dir="dist">
        <include name="**/zal.jar"/>
      </fileset>
    </copy>

    <exec executable="rpmbuild"
          dir="${rpm-dir-tmp}"
          failonerror="true">
      <arg value="-bb"/>
      <arg value="--buildroot"/><arg value="${rpm-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/buildroot"/>
      <arg value="openzal-${VERSION_MAJOR}.${VERSION_MINOR}/SPEC/openzal-${VERSION_MAJOR}.${VERSION_MINOR}.spec"/>
    </exec>
    <move file="${rpm-dir-tmp}/openzal-${VERSION_MAJOR}.${VERSION_MINOR}/RPMS/noarch/openzal-${VERSION_MAJOR}.${VERSION_MINOR}-${VERSION_MICRO}-0.noarch.rpm" todir="." />

    <delete dir="${rpm-dir-tmp}"/>
  </target>

  <target name="package"
    depends="package-deb, package-rpm">
  </target>

 <target name="dependencies" description="download dependencies">
    <property name="lib" value="lib"/>
    <if>
      <available file="${lib}/annotations-13.0.jar" />
      <else>
        <get src="http://central.maven.org/maven2/org/jetbrains/annotations/13.0/annotations-13.0.jar"
             dest="${lib}/annotations-13.0.jar" usetimestamp="true"/>
     </else>
    </if>
    <if>
      <available file="${lib}/commons-dbutils-1.6.jar" />
      <else>
        <get src="http://central.maven.org/maven2/commons-dbutils/commons-dbutils/1.6/commons-dbutils-1.6.jar"
             dest="${lib}/commons-dbutils-1.6.jar" usetimestamp="true"/>
     </else>
    </if>
    <if>
      <available file="${lib}/jackson-core-2.6.7.jar" />
      <else>
        <get src="http://central.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/2.6.7/jackson-core-2.6.7.jar"
             dest="${lib}/jackson-core-2.6.7.jar" usetimestamp="true"/>
     </else>
   </if>
    <if>
      <available file="${lib}/jackson-databind-2.6.7.jar" />
      <else>
        <get src="http://central.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.6.7/jackson-databind-2.6.7.jar"
             dest="${lib}/jackson-databind-2.6.7.jar" usetimestamp="true"/>
     </else>
   </if>
    <if>
      <available file="${lib}/jackson-annotations-2.6.7.jar" />
      <else>
        <get src="http://central.maven.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.6.7/jackson-annotations-2.6.7.jar"
             dest="${lib}/jackson-annotations-2.6.7.jar" usetimestamp="true"/>
     </else>
   </if>
 </target>

  <target name="help">
    <echo>
    <![CDATA[
      commands available are:

      zal-all                       build zal for all zimbra versions
      zal-common                    build zal for most commons zimbra versions
      zal-dev-current-source        build zal against current zimbra source in dev mode (zimbra jar must be located in ../zm-zcs-lib and ../zm-mailbox)
      zal-dev-current-binary        build zal against current zimbra binary in dev mode (zimbra be installed in /opt/zimbra)
      zal-dev-last                  build zal against last zimbra version in dev mode
      zal-{zimbra-version}          build zal against specified zimbra version in dev mode
      compatibility-check           check zal Java API Compliance against all zal versions
      fast-compatibility-check      check zal Java API Compliance against previous zal version
      clean                         clean up build
      doxygen                       create doxygen documentation
      help

      dev mode: no checks against zimbra version will be performed at runtime
    ]]>
    </echo>
  </target>

</project>
